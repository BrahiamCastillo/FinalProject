@page "/reserva"
@using FinalProject.Helpers
@inject DbContextOptions<rentcarContext> options

<h1>Reservación.</h1>
<hr>

@if (Vehicles().Count < 1 || Customers().Count < 1)
{

    <h2>No hay vehículos o clientes registrados.</h2>

}
else
{
    <div class="form-group">
    <label for="vehiculo">Selecciones un vehículo.</label>
    <select @bind="@vehiculo" name="vehiculo">
        @foreach (var veh in Vehicles())
            {
                <option value="@veh.IdVehiculos">@veh.Marca @veh.Modelo</option>
            }
        </select>
    </div>
    <hr>
    <div class="form-group">
    <label for="customers">Selecciones un cliente.</label>
    <select @onselect="@Operation" @bind="@cliente" name="vehiculo">
        @foreach (var cust in Customers())
            {
                <option value="@cust.IdClientes">@cust.Nombre @cust.Apellido</option>
            }
        </select>
    </div>
    <hr>
    <div class="form-group">
        <label for="fecha-inicio">Selecciona la fecha de inicio.</label>
        <input @bind-value="@fecha_inicio" type="date" name="fecha-inicio" id="fecha-inicio">
    </div>
    <hr>
    <div class="form-group">
        <label for="fecha-fin">Selecciona la fecha del fin de alquiler.</label>
        <input @bind-value="@fecha_fin" type="date" name="fecha-fin" id="fecha-fin">
    </div>

    <div class="form-group">
        <label for="fecha-fin">Ingrese el monto.</label>
        <input @bind-value="@monto" type="text" name="monto" id="monto">
        <button @onclick="@Operation" class="btn btn-danger">Calcular monto</button>
    </div>

    <div class="form-group">
        <button @onclick="@Process" class="btn btn-dark">Alquilar</button>
    </div>
    <hr>
    <h3>@message</h3>
}


@code {

    int vehiculo;
    int cliente;
    DateTime fecha_inicio = DateTime.Now;
    DateTime fecha_fin = DateTime.Now.AddDays(10);
    double monto;

    string message = "";

    int timeInDays;

    rentcarContext ctx;

    List<Vehiculos> Vehicles() => new rentcarContext(options).Vehiculos.Where(v => v.Disponible == 1 && v.Status == 1).ToList();

    List<Clientes> Customers() => new rentcarContext(options).Clientes.Where(c => c.Status == 1).ToList();

    protected override void OnInitialized()
    {
        ctx = new rentcarContext(options);
    }

    void Operation()
    {

        try
        {
            timeInDays = (fecha_fin - fecha_inicio).Days;

            var VehicleSelected = ctx.Vehiculos.Where(v => v.IdVehiculos == vehiculo).SingleOrDefault();

            monto = VehicleSelected.Precio * timeInDays;
        }
        catch (System.Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    void Process()
    {

        Alquileres newAlquiler = new Alquileres
        {

            VehiculosIdVehiculos = vehiculo,
            ClientesIdClientes = cliente,
            FechaInicio = fecha_inicio,
            FechaFin = fecha_fin,
            Monto = monto
        };

        try
        {
            ctx.Alquileres.Add(newAlquiler);
            var vehicle = ctx.Vehiculos.Where(i => i.IdVehiculos == vehiculo).SingleOrDefault();
            vehicle.Disponible = 0;
            ctx.SaveChanges();
            var client = ctx.Clientes.Where(c => c.IdClientes == newAlquiler.ClientesIdClientes).SingleOrDefault();
            string Name = client.Nombre + " " + client.Apellido;
            var veh = ctx.Vehiculos.Where(c => c.IdVehiculos == newAlquiler.VehiculosIdVehiculos).SingleOrDefault();
            string auto = veh.Marca + " " + veh.Modelo;
            HtmlFormat fact = new HtmlFormat();
            fact.htmlMake(newAlquiler, Name, auto, timeInDays, monto);
        }
        catch (System.Exception ex)
        {
            Console.WriteLine(ex.Message);
            message = "No se pudo realizar el registro del alquiler";
        }

    }

}